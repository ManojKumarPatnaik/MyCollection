
- Whenever we create a class or directive we add in app.module
- 
- Content projection is a pattern in which you insert, or project, the content you want to use inside another component
	- Ng-content : 
			- single-slot content projection - most basic
			- users of this component can now project their own message into the component
			- used when we want to insert the content dynamically inside the component that helps to increase component reusability
			- Add a select attribute to the <ng-content> elements
			- Each slot can specify a CSS selector that determines which content goes into that slot. This pattern is referred to as multi-slot content projection.
			- <ng-content select="[question]"></ng-content>
	- Ng-template : 
			- conditionally projection using <ng-template>
- Directives : An instruction to DOM
	- Components : AppComponents
	- Attribute Directives : ngStyle, ngClass
	- Structural : ngIf , ngFor
- Event Bubbling : 
- NgRx : 
	- Subscription : Each subs to observable, its help in memory and if not released creates a memory leak.
- ChangeDetectionStrategy : 
	- OnPush change detection strategy for specific components
	- ... : spread snatx: pass individual entry to the function. 
		- console.log(..."BANANA") - o/p - B A N A N A
		- Math.min(...."5432") : 2 here we are passing each digit individually to the min function
		- combine 2 arrays to 1
			- a["a","b"], b["c","d'], newaRR= [...a,...b] - ["a","b","c","d"] without spread it would have given  a nested array
	- apply changedetection on the child component and it detects changes from the parent 
	- The child component is updated when Angular detects the data has changed in the parent component.
	- this.aquaticCreatures = [...this.aquaticCreatures, newAquaticCreature]; - this is an array that is marking a push intself in the parent component
	
- NgZone:
-----------

In Angular, NgZone is used to manage and monitor the execution of asynchronous tasks. It provides a way to execute code outside of the Angular zone, which can improve performance and prevent certain issues, such as change detection errors.
Here are some scenarios where you might want to use NgZone:
1. When working with third-party libraries or APIs that run outside of the Angular zone.
2. When dealing with long-running tasks, such as HTTP requests or heavy computations, that could block the UI thread and cause the application to freeze.
3. When working with browser events, such as mouse or keyboard events, that can cause the application to trigger change detection unnecessarily.
By using NgZone, you can ensure that your code runs in the correct zone and that change detection is triggered only when necessary.

> Disadvantages : 
	1. Increased complexity: Using NgZone can add complexity to your code, especially if you're not familiar with how change detection works in Angular.
	2.Performance overhead: NgZone can add some performance overhead to your application, as it needs to run change detection on every event that occurs within 		the application.
	3.Difficult to debug: If there are issues with change detection, it can be difficult to debug, as NgZone is a black box that handles change detection 		internally.
	4.Dependency on Angular: NgZone is an Angular-specific service, which means that if you ever decide to switch to a different framework, you'll need to 		rewrite any code that relies on it.

--------------------------------------------------------------------------------------------------------------------------------------------------------------

template reference : #primaryinput etc -- starts with #

=> VIEWCHILD
=================
=> NEED
	1. To access a child component's properties or methods from the parent component.
	2. To manipulate the child component's DOM elements from the parent component.
	3. To listen to events emitted by the child component.
	
	- Appcomponent need references to many elements inside its template. thats when viewchild can be used
	- Change behaviour of element in component class. Then we must get reference of the element. 
	- It return ElementRef type
	-  sample : 
		> user.component.html
			<span class="" #somecontent> Some Content </span>
		> user.component.ts
			export class LatesComponent implement OnInit{
			@ViewChild('somecontent') somecontent : ElementRef;
	- when parent component are getting constructed means child are not created yet
	- Lifecycle where the viewchild child are created		
			- ngAfterViewInit
			- ngAfterViewChildChecked
		> We need to import  ViewChild, AfterViewInit, ElementRef from @angular/core
			user.component.ts
				export class LatesComponent implement OnInit, AfterViewInit{
				ngAfterViewInit(){
				console.log('Child created here')
				this.somecontent.nativeElemt //this returns the DOM}
=> COMPONENT AS A ViewChild
	- create a new component lets say dateComponent
	> date-viewer.component.ts	
		date: Date = new Date()
	> date-viewer.component.html
		{{date}}
	> user.component.html
		<div>
			<span class="">
				<app-date-viewer></app-date-viewer>
	- inherit in user.component.ts
	> @ViewChild{DateViewComponent} dateViewerComponent : DateViewComponent
		ngAfterViewInit(){
			console.log(this.dateViewerComponent.Today); //dateViewerComponent contains all variables of the DateViewComponent
	- we can also updte DateViewComponent value in UserComponent
=> ViewChildren
	- if we wan to access multiple decorator, then we use it.
	- returns QueryList<> type.
	> user.component.html
		<div>
			<span class="">
				<app-date-viewer></app-date-viewer>
				<app-date-viewer></app-date-viewer>
				<app-date-viewer></app-date-viewer>
	- in above case only once the console.log will print if we user ViewChild.
	- import ViewChildren
	> @ViewChildren{DateViewComponent} dateViewerComponent : QueryList<DateViewComponent>
	ngAfterViewInit(){
			console.log(this.dateViewerComponent.ToArray()); //convert QueryList toArray
			}

--------------------------------------------------------------------------------------------------------------------------------------------------------------
=> DIRECTIVE
===================
	- Modify existing behavior to elements *in template
	- Used to manipulate DOM
	- Types:
		- Component directive-
			-  directive with template
			- shows something in DOM
		- structural directive
			- Change DOM by adding removing DOM element
				- Ex : *ngIf, *ngFor, ngSwitch
		- Attribute Directive
			- Change appearance or behavior
				- EX: ngStyle, ngClass
	- Creating own
		- @Directive decorator
		- ElementRef dependency using constructor
		- Listen to event, listen to DOM event on host element : HostListener
			- Example [Attribute Directive]: Changecolor on hover
				- @Directive({ selectore: '[highlight]' )}
- [ ] Export  class Highlightdirective{
      				Constructor  (private eleRef: ElementRef) {}
      				@HostListener  ('mouseover') onMouseOver()[
      				This.eleRef.nativeElement.style.color  ='red';
      				}
      				@HostListener  ('mouseleave') onMouseOver()[
      				This.eleRef.nativeElement.style.color  ='black';
      				}
	- Passing input to directive
		- Using @input
			- Same name as directive - @Input highlight
				- <p highlight="blue"> Highlight Directive </p>
			- Any variable - @Input() colorName
				- <p highlight="blue" colorName="green"> Highlight Directive </p>
	- Example [structural directive]: adds or remove content based in value provided
		- <div *toggle="true"><p>some text</p></div>
		- @Directive with selector property
		- Structural directive need 2 things and inject in constructor
			1. ViewContainerRef : holds Reference to host element
			2. TemplateRef : holds reference of template defined by ng-template
		- Create @input same as directive , to add remove content
		- ngOnChnages() lifecycle hook : when value is true or false
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=> INTERCEPTORS
===================
@injectable - 
marks class is avaiable to be provided and injected as a dependency

interceptors
-------------
- main purpose is to capture and modify HTTP requests and responses.
- helps in authorization, changing headers, modify resonse from server, caching etc
- Its a TS class iplements HttpInterceptor interface
- intercept() ->  identiifes and handles HTTP requests
> 
export class AuthInterceptorService implements HttpInterceptor {
  constructor(private authService: AuthService) {} 
 intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {  
    const token = this.authService.getAuthToken();

   if (token) {
     // If we have a token, we set it to the header
     request = request.clone({
        setHeaders: {Authorization: `Authorization token ${token}`}
     });
  }

  return next.handle(request).pipe(
  	catchError((err) => {
   	 if (err instanceof HttpErrorResponse) {
       	 if (err.status === 401) {
       	 // redirect user to the logout page
     	}
 	 }
  	return throwError(err);
	})
   )
  }
}

> add the interceptor service to AppModule
	providers: [ Authservice {
							provide : HTTP_INTERCEPTORS
							useClass : AuthInterceptorService
							multi : true // tells angular that we can provide multiple values for a single token in DI
							}//for multi interceptor add ',' after this ofbject and repeat same
							]
--------------------------------------------------------------------------------------------------------------------------							
PIPES
=======
- simple dunctuions to use in template expression to accept an input value and return an transformed value.
> ng new pipes
- syntax : {{input | pipeName}}
		(multi param) - {{ input| pipeName: param1 param2:
	> Date Pipe
	------------
		- export class AppComponent { birthday = new Date(1996, 3 ,21) }
		- My birthday is {{birthday | date}}
		- (multi) : {{ value_expression | date [ : format [ : timezone [ : locale ] ] ] }}
			- {{ birthday | date: 'dd/MM/yyyy' }}
-Types
--------
	- pure  : default , called when Angular detects a change in the passed value
	- impure : called for every change detection cycle no matter whether the value changes
				- add pure:false in the @pipe decorator where we provide the name of the pipe.
- Pipe Chaining
------------------
	- {{ birthday | date: 'fullDate' | uppercase }}
	- pipes applied from left to right
	
- Build - in Pipes
-------------------
	- CurrencyPipe, UpperCasePipe/LowerCasePipe/TitleCasePipe 
	- PercentPipe - input is number to string 
	- DecimalPipe - numer to string

- Custom Pipes
----------------
	> ng g pipes/age
	> age.pipe.ts
	------------SYNTAX--------------
		import {Pipe, PipeTransform} from '@angular/core';
		@Pipe({
			name : 'age' })
		export class AgePipe implements PipeTransform {
			transform( value: any, ...args: any[]): any {
				return null;}
				}
	-------------Ex------------------
	export class AgePipe implements PipeTransform {
		
		transform(value: Date, capitalize: boolean = false, withEmojis: boolean = false): any {
			const currentYear = new Date().getFullYear();
			const dobYear = value.getFullYear();     const age = currentYear - dobYear;
		
			return age + ' years old';
		}}
		
	{{ birthday | age }}
	{{ birthday | age: true: true }}
==========================================================================================================================================================
PARTIAL CLASSES
----------------
Partial (TS) - make all of the properties of a type optional. This means developers will no longer have to provide values to all properties of a type

			>    function updateTodo(todo: Todo, fieldsToUpdate: Partial<Todo>) {
				  return { ...todo, ...fieldsToUpdate };
				}
				


==========================================================================================================================================================
MODULES
----------
- useful in splitting app in smaller parts and lazy load each separately
- create libraries of components that can be imported into other apps
- essential in template parsing (both In time and Ahead of time compilation)
- used to clarify which componenet and directive ti be used publically or internally
EX : Recactive form module contains directoves /services/pipes/components that can be used together.
	Router module
	
	> import {BrowserModule{ from '@angular.platform-browser'
	...
	@NgModule({
		declarations : [AppComponent, MyComboboxComponent, ...],
		imports : [BrowserModule],
		providers : [USerService, LessonsService]
		})
	export class ExampleModule{}
- If inheriting in the module means that service is available for injection anywhere in app
- Not creatig a app wide nested DI structure is to help in application-wide -singleton
- Issue with Main AngularJS : eveything was in single DI bucket, means we can override lazy laoded services with newer version anywhere in the app
	
=> Application root module
-----------------------------
	- one root module, each component, directive, pipe are associated with only one module.
	- what identifies as root modelu?
		-> conventional name as appmodule
		-> basic directives like ngIf, ngFor etc BrowserModule etc
		-> Bootstrap property -> that used for bootstrap entry point of app
		
	- to make any component publically available we need to export it in the module.
	- If try to use component directl without importing in module we get exception
	- imports :  makes the exported declarations of other modules available in the current module
	- declarations : to make directives (including components and pipes) from the current module available to other directives in the current module. Selectors of directives, components or pipes are only matched against the HTML if they are declared or imported.
	- providers : to make services and values known to DI (dependency injection). They are added to the root scope and they are injected to other services or directives that have them as dependency.
		~ provideIn : each child module would need to specify this while using the service.
	- bootstrap : specifies which component should be loaded by Angular when the app-level module loads
		
	
=> Dynamic Lazy Loading and Just in time compilation
	- adding .bootstrapModule(AppModule); in front of the module is Just in time compilation
	- Compiles your application in the browser at runtime. Default until Angular8
	- Lazily loaded modules has separate DI context.
	
=> Ahead of time compilation
	- converts the Angular HTML and typescript to javascript
	- Compiles your application and libraries at build time
	-default starting in Angular 9.
	- extracts metadata to interpret the parts of the application
	- metadata explicitly in decorators - @Component() and @Input()
		-> Compilation Phase : 
			+ Code Analysis
			+ Code generation
			+ Template Type Checking 
			
	- We can set AOT false while running ng serve or ng build and setting aot to false (true by default)
=> Feature Modules
	- A feature module is meant to extend the global application with a new set of features: for example, new screens and injectable services.
	- delivers specific set of functionality like workflow , forms etc
=> Shared Modules
===================
		- import the required module in imports property.
		- include the same module in the exports proprtyy as well.
		- With Lazy loading -> static forRoot(): ModuleWithProviders{
								returns {
									ngModule: ShareModule,
									providers: [LazyLoadingModule]}};
							import the above module with .forRoot() in the main module.
	
======
=> Eager Loading : modules loaded before the application starts. Default module-loading strategy.
				- used to load core modules and feature modules that are required to start the application.
				- Import EgerLoading module in appModules
				- Register all components in app-routing.module.ts 	with forRoot strategy.
				> @NgModule({
					  imports: [RouterModule.forRoot(routes)],
					  exports: [RouterModule]
					})
				
=> Lazy Loading : modules loaded on demand. Helps app start faster
				- all other modules could be lazily loaded on demand after the application started.
				- Register all components in lazy-loading.module.ts 	with forChild strategy.
				- shared modules uses forRoot()
				> @NgModule({
					 imports: [
						RouterModule.forChild(routes)
					  ]})
				>loadChildren property in the app-routing.module.ts
				- Without routing we can use - createNgModuleRef - Lazy loading a module, only when it is required. (//https://www.wittyprogramming.dev/articles/lazy-load-component-angular-without-routing/)
=> Pre-Loading : modules loaded auto after app starts
				- used to load specific feature modules that are very likely to be used soon after the application started.
				
				
here are other ways to lazy load a module or component in Angular:
1.Using the Router: You can use the Angular Router to lazy load a module or component on demand. This involves configuring the router to load the module or component when a specific route is requested. This is the most common way to lazy load modules in Angular.
2.Using dynamic component loading: You can use Angular's ComponentFactoryResolver to dynamically load a component on demand. This involves creating a ComponentFactory for the component you want to load, and then using the ComponentFactoryResolver to create an instance of the component.
3.Using loadChildren with a string: You can use the loadChildren property of a route to lazy load a module using a string that specifies the path to the module. This is similar to using the Router, but it allows you to specify the module path as a string instead of using a function that returns a module.
4.Using loadChildren with a function: You can also use the loadChildren property of a route to lazy load a module using a function that returns a module. This gives you more control over how the module is loaded, and allows you to perform additional checks or operations before loading the module.
========================================================================================================================
GAURD
-----
In Angular, a guard is an interface that can be implemented to provide navigation protection. Guards are used to restrict access to certain routes based on certain conditions.
There are four types of guards in Angular:
1.
CanActivate: This guard is used to allow or deny access to a route based on a condition. It can be used to check if a user is authenticated or has permission to access a certain route.
2.
CanActivateChild: This guard is similar to CanActivate, but it is used to protect child routes instead of the main route.
3.
CanDeactivate: This guard is used to prevent users from leaving a route with unsaved changes. It can be used to ask the user if they want to discard their changes before leaving.
4.
CanLoad: This guard is used to prevent the loading of a module or lazy-loaded route until a condition is met. It can be used to check if a user is authenticated or has permission to load a certain module.
Guards are typically used in conjunction with the Angular Router to provide navigation protection in an Angular application.
=========================================================================================================================
   ngOnInit() vs Constructor
---------------------------
	- lifecycle hook by angular, indicating that angular is done creating instance 
	- onstructor only used for DI work and instantiating class members
	-  constructor() {
     // Called first time before the ngOnInit()	
	   ngOnInit() {
     // Called after the constructor and called  after the first ngOnChanges() 
  
========================================================================================================================
DI in Angular
--------------
Dependency Injection (DI) in Angular is a design pattern that allows you to create reusable, modular, and testable code. It is a way of providing the objects that an object needs, rather than requiring the object to create them itself.
In Angular, DI is implemented by the @Injectable decorator and the Injector class. The @Injectable decorator is used to define a service, which is a class that provides some functionality to other parts of the application. The Injector class is used to create instances of services and to provide them to other parts of the application.
To use DI in Angular, you need to follow these steps:
1. Create a service by defining a class with the
@Injectable
decorator.
2. Define the dependencies of the service in the constructor.
3. Use the service in a component or another service by declaring it as a constructor parameter.
4. The Angular DI system creates an instance of the service and provides it to the component or service that requested it.
The main benefits of using DI in Angular are:
1. Reusability: Services can be used in multiple components, making it easy to reuse code.
2. Testability: Services can be easily tested in isolation, without having to worry about their dependencies.
3. Modularity: Services can be easily swapped out or replaced, making it easy to switch between different implementations.
4. Scalability: DI makes it easy to add new functionality to an application, without having to worry about the dependencies of existing code.


==================================================================================
Ways to share data in Angular
-----------------------------
There are different ways to share data between Angular components. Here are some common approaches:
1.
Using Input and Output Decorators: You can use @Input and @Output decorators to pass data between parent and child components. @Input is used to pass data from parent to child component, while @Output is used to emit events from child to parent component.
2.
Using Services: You can create a shared service that provides data to multiple components. Components can then inject the service and use its methods to access or modify the data.
3.
Using RxJS Observables: You can use RxJS Observables to share data between components. The data can be emitted by one component and subscribed to by another component.
4.
Using Local Storage: You can store data in local storage and retrieve it in another component.


Bundeling in Angular
----------------------
Bundling in Angular is the process of combining multiple JavaScript and CSS files into a single file, called a bundle, that can be served to the client. This reduces the number of HTTP requests required to load the application, which can significantly improve the application's load time.
Angular provides a built-in mechanism called the Angular CLI (Command Line Interface) for creating and managing bundles. When you run the ng build command, the CLI generates a set of JavaScript and CSS bundles based on your application's code and configuration.
The bundles generated by the Angular CLI use a technique called tree shaking to remove any unused code from the final bundle. This helps to keep the bundle size small, which is important for optimizing the application's load time.
In summary, bundling in Angular is a process of combining JavaScript and CSS files into a single file, which can reduce the number of HTTP requests and improve the application's load time.
-===============================================================================
Types of Data Loading in Angular
---------------------------------
n Angular, there are different ways to load data from an external source:
1.
Eager loading: In this approach, data is loaded at the time of component initialization. This is suitable for small applications with less complex data.
2.
Lazy loading: In this approach, data is loaded only when it is required. This is suitable for large applications with complex data that might take time to load.
3.
Server-side rendering (SSR): In this approach, the data is loaded on the server and then rendered on the client-side. This improves the performance of the application and also helps with SEO.
4.
Preloading: In this approach, the application preloads the data in the background so that it is available when the user navigates to a different page. This improves the user experience by reducing the loading time.
5.
Caching: In this approach, the data is cached on the client-side so that it can be reused without having to make a network call. This improves the performance of the application and reduces the load on the server.
